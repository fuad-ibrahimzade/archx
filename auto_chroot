#!/usr/bin/env bash
clear
# Define colors
# Reset
colorOff='\033[0m'       # Text Reset
# Regular Colors
red='\033[0;31m'          # Red
green='\033[0;32m'        # Green

# Export locale
export LC_ALL=C

# Check if user was root continue the script
if [[ $( id -u ) != 0 ]];then
     echo -e "\n${red}Can't install without root user permissions \n exiting${colorOff}"
     exit
fi

# Check you are in chroot or not!                                                                     
if [ "$(stat -c %d:%i /)" != "$(stat -c %d:%i /proc/1/root/.)" ]; then                                
  echo -e "${green}Chroot detected${colorOff} \n"                                                                              
else                                                                                                  
  echo -e "${red}You aren't in chroot mode . exiting...${colorOff}\n"                                                       
  exit                                                                                                
fi  

# Check the internet connection : you should be ONLINE
echo -e "\nChecking internet connection...."
ping_counter=0
while [ 1 ];do
    if [[ ! $( ping -c 3 8.8.8.8 ) ]];then
        echo  -e "${red}Connection is not stable .... \n Check your connection...${colorOff}"
        sleep 5
        ((ping_counter++))
        echo $ping_counter
        if [ "$ping_counter" == "4" ];then
          echo "${red}Exiting...${colorOff}"  
          exit
        fi
    else
        echo -e "${green}Connection established! ${colorOff}\n"
       break
      fi
done


# Provide pacman for first use :
pacman -Sy
pacman-key --init
pacman-key --populate archlinux

# Install tools for bootloader installation
echo -e "${green}Installing needed tools ! ${colorOff}\n"
if [ -d "/sys/firmware/efi"  ]; then
    echo "${green}EFI detected!${colorOff} \n"
    pacman -S grub dosfstools efibootmgr os-prober --needed --noconfirm
    else
        pacman -S grub os-prober --needed --noconfirm
fi

clear

# Set password for root user
echo -e "${green}Set a PASSWORD for root user :${colorOff} \n "
while [ 1 ]; do
  passwd   
  if [ ! $? == "0" ];then
      clear
      echo -e "${green}Set a PASSWORD for root user : ${colorOff}\n"
      passwd
    else
      break
    fi
  done

# Create a normal user
read -p  "Please enter a USERNAME : " USER_NAME_INPUT
UNAME=$(echo $USER_NAME_INPUT | tr '[:upper:]' '[:lower:]')
useradd -m -g users  -G wheel,storage,power  -s $(which zsh) $UNAME
# Set password for new normal user
echo -e "${green}Set a PASSWORD for $UNAME :${colorOff} "
while [ 1 ]; do
  passwd $UNAME
    if [ ! $? == "0" ];then
      clear
      echo -e "${green}Set a PASSWORD for $UNAME :${colorOff} \n"
      passwd $UNAME
    else
      break
    fi
  done
clear

# Set timezone
tzselect

echo -e "${green}Find your timezone file${colorOff}\n${red}Press ARROW KEYS to move and Press q to quit...${colorOff}"
sleep 5
rm -f /etc/localtime
while [ 1 ];do
  read -p "Enter your selected region (press TAB button) : " -i "/usr/share/zoneinfo/" -e  SELECTED_REGION
  if [ -e "$SELECTED_REGION" ];then
	  ln -sf  $SELECTED_REGION /etc/localtime
	  break
    else
     	echo -e "${red}Entered wrong path...${colorOff}\n"
    fi
done

clear

# Set hostname for new system
echo -e "${green}Setting hostname${colorOff} \n"
read -p "Please enter youre HOSTNAME : " HOST_NAME_INPUT
echo "$HOST_NAME_INPUT" > /etc/hostname

# Set locale for new system
echo -e "${green}Setting locale${colorOff} \n"
sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen
locale-gen
locale > /etc/locale.conf

# Add permission for wheel users to run commands with sudo
echo -e "${green}Editing /etc/sudoers (let wheel users to execute sudo!)${colorOff} \n"
sed -i 's/# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/g' /etc/sudoers

clear

# Install grub bootloader
echo -e "${green}Start installing BootLoader(grub) ${colorOff}\n"
if [ -d "/sys/firmware/efi" ]; then
    if [ -d "/boot/efi" ]; then
       echo -e "${green}EFI partition detected !${colorOff}\n"
       grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=arch_grub --recheck --debug --force
    elif [ -d "/boot/EFI" ]; then
      echo -e "${green}EFI partition detected !${colorOff}\n"
      grub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=arch_grub --recheck --debug --force
      else
        while [ 1 ]; do
            read -p "Where is esp (EFI) partition mounted (e.g.: /boot , /boot/esp) ? : " EFI_MOUNTPOINT
            echo -e "${green}EFI partition is $EFI_MOUNTPOINT${colorOff}"
            if [ -d "$EFI_MOUNTPOINT" ];then
              grub-install --target=x86_64-efi --efi-directory=$EFI_MOUNTPOINT --bootloader-id=arch_grub --recheck --debug --force
              break
            else
              echo -e "${red}You entered wrong EFI MOUNTPOINT ${colorOff}\n"
            fi
          done
        fi
  else
    echo -e "${green}Legacy mode detected... !${colorOff}\n"
    read -p "On which device you want to  install BOOTLOADER ? (Default = /dev/sda) : " DEVICE_INPUT
    if [[ "$DEVICE_INPUT" != "/dev/sda" &&  ! -z "$DEVICE_INPUT" ]]; then
        grub-install --target=i386-pc --recheck $DEVICE_INPUT
        else
            grub-install --target=i386-pc --recheck /dev/sda
    fi
  fi
# Make initramfs
echo -e "${green}Making initramfs${colorOff} \n"
read -p "Which KERNEL did you installed(linux or linux-zen or linux-hardened)? (Default = linux) : "  KERNEL_TYPE_INPUT
if [[ "$KERNEL_TYPE_INPUT" !=  "linux" &&  ! -z "$KERNEL_TYPE_INPUT" ]]; then
    mkinitcpio -p $KERNEL_TYPE_INPUT
else
    mkinitcpio -p linux
fi

# Create grub config
echo -e "${green}Making GRUB CONFIG ${colorOff}\n"
grub-mkconfig -o /boot/grub/grub.cfg

echo -e "${green}Chroot jobs Done! ${colorOff}\n"


